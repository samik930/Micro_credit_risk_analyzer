{"ast":null,"code":"export class RealisticCreditEngine {\n  // Credit Score Calculation (300-900 scale like CIBIL)\n  static calculateCreditScore(userData) {\n    var _loanEligibility$emi_, _loanEligibility$emi_2;\n    const profile = this.buildFinancialProfile(userData);\n\n    // Component Scores (0-100 each)\n    const paymentHistoryScore = this.calculatePaymentHistoryScore(userData);\n    const creditUtilizationScore = this.calculateCreditUtilizationScore(userData);\n    const incomeStabilityScore = this.calculateIncomeStabilityScore(userData);\n    const digitalBehaviorScore = this.calculateDigitalBehaviorScore(userData);\n\n    // Weighted Score Calculation\n    const weightedScore = paymentHistoryScore * 0.40 + creditUtilizationScore * 0.25 + incomeStabilityScore * 0.20 + digitalBehaviorScore * 0.15;\n\n    // Convert to 300-900 scale\n    const creditScore = Math.round(300 + weightedScore * 6);\n\n    // Determine Risk Band\n    const riskBand = this.getRiskBand(creditScore);\n\n    // Calculate Default Probability\n    const defaultProbability = this.calculateDefaultProbability(creditScore, userData);\n\n    // Loan Eligibility\n    const loanEligibility = this.calculateLoanEligibility(userData, creditScore);\n\n    // Generate Recommendations\n    const recommendations = this.generateRecommendations(userData, profile);\n\n    // Peer Comparison\n    const percentileRank = this.calculatePercentileRank(creditScore);\n    const peerComparison = this.generatePeerComparison(percentileRank, userData);\n    return {\n      user_id: userData.user_id,\n      credit_score: creditScore,\n      risk_band: riskBand,\n      default_probability: defaultProbability,\n      decision: this.makeDecision(creditScore, defaultProbability),\n      score_components: {\n        payment_history: {\n          score: paymentHistoryScore,\n          weight: 40\n        },\n        credit_utilization: {\n          score: creditUtilizationScore,\n          weight: 25\n        },\n        income_stability: {\n          score: incomeStabilityScore,\n          weight: 20\n        },\n        digital_behavior: {\n          score: digitalBehaviorScore,\n          weight: 15\n        }\n      },\n      max_eligible_amount: loanEligibility.max_amount,\n      recommended_emi: ((_loanEligibility$emi_ = loanEligibility.emi_options[0]) === null || _loanEligibility$emi_ === void 0 ? void 0 : _loanEligibility$emi_.emi) || 0,\n      optimal_tenure_months: loanEligibility.tenure_options[0] || 12,\n      improvement_suggestions: recommendations.immediate,\n      financial_coaching: recommendations.coaching,\n      percentile_rank: percentileRank,\n      peer_comparison: peerComparison,\n      rbi_compliant: this.checkRBICompliance(userData, loanEligibility.max_amount),\n      rbi_violations: this.getRBIViolations(userData, loanEligibility.max_amount),\n      emi_to_income_ratio: (((_loanEligibility$emi_2 = loanEligibility.emi_options[0]) === null || _loanEligibility$emi_2 === void 0 ? void 0 : _loanEligibility$emi_2.emi) || 0) / userData.monthly_income * 100\n    };\n  }\n\n  // Payment History Score (40% weight)\n  static calculatePaymentHistoryScore(userData) {\n    const billPaymentScore = userData.electricity_bill_on_time * 0.3 + userData.dth_recharge_on_time * 0.2 + userData.internet_bill_on_time * 0.2 + userData.rent_payment_on_time * 0.3;\n    const loanRepaymentScore = userData.loan_repayment_history_score;\n    const defaultPenalty = userData.previous_loan_defaults * 20;\n    return Math.max(0, Math.min(100, billPaymentScore * 0.6 + loanRepaymentScore * 0.4 - defaultPenalty));\n  }\n\n  // Credit Utilization Score (25% weight)\n  static calculateCreditUtilizationScore(userData) {\n    const debtToIncomeRatio = (userData.existing_loan_emi + userData.credit_card_outstanding * 0.05) / userData.monthly_income;\n    const expenseToIncomeRatio = userData.monthly_expenses / userData.monthly_income;\n\n    // Lower ratios = better score\n    const utilizationScore = Math.max(0, 100 - debtToIncomeRatio * 200);\n    const spendingScore = Math.max(0, 100 - expenseToIncomeRatio * 100);\n    return utilizationScore * 0.7 + spendingScore * 0.3;\n  }\n\n  // Income Stability Score (20% weight)\n  static calculateIncomeStabilityScore(userData) {\n    const incomeTypeScore = {\n      'salary': 90,\n      'business': 70,\n      'freelance': 60,\n      'daily_wage': 40\n    }[userData.income_type];\n    const stabilityBonus = Math.min(20, userData.income_stability_months * 2);\n    const employmentScore = Math.min(30, userData.years_of_employment * 5);\n    const savingsScore = Math.min(25, userData.savings_rate * 2.5);\n    return Math.min(100, incomeTypeScore + stabilityBonus + employmentScore + savingsScore);\n  }\n\n  // Digital Behavior Score (15% weight)\n  static calculateDigitalBehaviorScore(userData) {\n    const upiScore = Math.min(30, userData.upi_transactions_per_month * 2);\n    const walletScore = Math.min(25, userData.digital_wallet_usage * 2.5);\n    const onlineBillScore = userData.online_bill_payments * 0.3;\n    const digitalActivityScore = userData.digital_financial_activity_score * 0.15;\n    return upiScore + walletScore + onlineBillScore + digitalActivityScore;\n  }\n\n  // Risk Band Classification\n  static getRiskBand(creditScore) {\n    if (creditScore >= 750) return 'Excellent';\n    if (creditScore >= 650) return 'Good';\n    if (creditScore >= 550) return 'Fair';\n    if (creditScore >= 450) return 'Poor';\n    return 'Very Poor';\n  }\n\n  // Default Probability Calculation\n  static calculateDefaultProbability(creditScore, userData) {\n    let baseProbability = Math.max(1, 50 - (creditScore - 300) / 12);\n\n    // Adjust based on specific risk factors\n    if (userData.previous_loan_defaults > 0) baseProbability += userData.previous_loan_defaults * 15;\n    if (userData.existing_loan_emi / userData.monthly_income > 0.5) baseProbability += 10;\n    if (userData.emergency_savings < userData.monthly_expenses) baseProbability += 8;\n    return Math.min(95, Math.max(1, Math.round(baseProbability)));\n  }\n\n  // Loan Eligibility Calculation\n  static calculateLoanEligibility(userData, creditScore) {\n    const maxEMICapacity = userData.monthly_income * 0.4 - userData.existing_loan_emi;\n    const baseAmount = Math.min(125000, userData.monthly_income * 10); // RBI limit\n\n    // Adjust based on credit score\n    const scoreMultiplier = creditScore >= 750 ? 1.0 : creditScore >= 650 ? 0.8 : creditScore >= 550 ? 0.6 : 0.4;\n    const maxAmount = Math.round(baseAmount * scoreMultiplier);\n    const recommendedAmount = Math.round(maxAmount * 0.7);\n    const tenureOptions = [12, 18, 24, 36];\n    const interestRate = this.getInterestRate(creditScore);\n    const emiOptions = tenureOptions.map(tenure => {\n      const monthlyRate = interestRate / 100 / 12;\n      const emi = Math.round(recommendedAmount * monthlyRate * Math.pow(1 + monthlyRate, tenure) / (Math.pow(1 + monthlyRate, tenure) - 1));\n      const totalAmount = emi * tenure;\n      const totalInterest = totalAmount - recommendedAmount;\n      return {\n        tenure,\n        emi,\n        total_interest: totalInterest,\n        total_amount: totalAmount\n      };\n    }).filter(option => option.emi <= maxEMICapacity);\n    return {\n      eligible: maxAmount > 10000 && emiOptions.length > 0,\n      max_amount: maxAmount,\n      recommended_amount: recommendedAmount,\n      tenure_options: tenureOptions,\n      interest_rate_range: {\n        min: interestRate,\n        max: interestRate + 2\n      },\n      emi_options: emiOptions\n    };\n  }\n\n  // Interest Rate Based on Credit Score\n  static getInterestRate(creditScore) {\n    if (creditScore >= 750) return 18;\n    if (creditScore >= 650) return 22;\n    if (creditScore >= 550) return 24;\n    return 26; // RBI cap\n  }\n\n  // Generate Personalized Recommendations\n  static generateRecommendations(userData, profile) {\n    const immediate = [];\n    const coaching = [];\n\n    // Payment History Improvements\n    if (userData.overall_bill_payment_score < 80) {\n      immediate.push(\"Set up auto-pay for all utility bills to improve payment consistency\");\n      coaching.push({\n        priority: 'high',\n        action: \"Enable auto-debit for electricity, DTH, and internet bills\",\n        impact: \"Can improve credit score by 30-50 points in 3 months\"\n      });\n    }\n\n    // EMI Management\n    const emiRatio = userData.existing_loan_emi / userData.monthly_income;\n    if (emiRatio > 0.4) {\n      immediate.push(`Your EMI-to-income ratio is ${Math.round(emiRatio * 100)}% (too high). Reduce EMIs below 40% to improve score`);\n      coaching.push({\n        priority: 'high',\n        action: \"Consider loan restructuring or prepayment to reduce EMI burden\",\n        impact: \"Reducing EMI ratio to 30% can improve eligibility by ₹25,000\"\n      });\n    }\n\n    // Digital Behavior\n    if (userData.upi_transactions_per_month < 20) {\n      immediate.push(\"Increase UPI transactions to build stronger digital payment history\");\n      coaching.push({\n        priority: 'medium',\n        action: \"Use UPI for daily transactions like groceries, fuel, and small purchases\",\n        impact: \"Higher digital activity can boost score by 15-25 points\"\n      });\n    }\n\n    // Emergency Savings\n    if (userData.emergency_savings < userData.monthly_expenses * 3) {\n      immediate.push(`Build emergency fund to ₹${userData.monthly_expenses * 3} (3 months expenses)`);\n      coaching.push({\n        priority: 'medium',\n        action: `Save ₹${Math.round((userData.monthly_expenses * 3 - userData.emergency_savings) / 6)} per month for 6 months`,\n        impact: \"Adequate emergency fund reduces default risk and improves loan terms\"\n      });\n    }\n\n    // Savings Rate\n    if (userData.savings_rate < 20) {\n      immediate.push(\"Increase savings rate to at least 20% of income for better financial health\");\n      coaching.push({\n        priority: 'low',\n        action: \"Track expenses and identify areas to cut discretionary spending\",\n        impact: \"Higher savings rate demonstrates financial discipline\"\n      });\n    }\n    return {\n      immediate,\n      coaching\n    };\n  }\n\n  // Build Financial Profile\n  static buildFinancialProfile(userData) {\n    return {\n      debt_to_income_ratio: userData.existing_loan_emi * 12 / (userData.monthly_income * 12),\n      savings_to_income_ratio: userData.savings_rate / 100,\n      expense_to_income_ratio: userData.monthly_expenses / userData.monthly_income,\n      payment_consistency_score: userData.overall_bill_payment_score,\n      bill_payment_reliability: (userData.electricity_bill_on_time + userData.dth_recharge_on_time + userData.internet_bill_on_time + userData.rent_payment_on_time) / 4,\n      loan_repayment_track_record: userData.loan_repayment_history_score,\n      digital_payment_adoption: userData.digital_financial_activity_score,\n      financial_app_usage: userData.digital_wallet_usage,\n      online_banking_activity: userData.online_bill_payments,\n      income_volatility: userData.income_type === 'salary' ? 10 : userData.income_type === 'business' ? 30 : 50,\n      emergency_fund_adequacy: userData.emergency_savings / userData.monthly_expenses * 33.33,\n      credit_utilization_pattern: userData.credit_card_outstanding / userData.monthly_income * 100\n    };\n  }\n\n  // Calculate Percentile Rank\n  static calculatePercentileRank(creditScore) {\n    // Simulated distribution based on Indian credit score patterns\n    if (creditScore >= 800) return 95;\n    if (creditScore >= 750) return 85;\n    if (creditScore >= 700) return 70;\n    if (creditScore >= 650) return 55;\n    if (creditScore >= 600) return 40;\n    if (creditScore >= 550) return 25;\n    return 10;\n  }\n\n  // Generate Peer Comparison\n  static generatePeerComparison(percentileRank, userData) {\n    const incomeGroup = userData.monthly_income >= 50000 ? 'high-income' : userData.monthly_income >= 25000 ? 'middle-income' : 'entry-level';\n    return `You are better than ${percentileRank}% of borrowers in the ${incomeGroup} category`;\n  }\n\n  // Decision Making\n  static makeDecision(creditScore, defaultProbability) {\n    if (creditScore >= 650 && defaultProbability <= 20) return 'Approve';\n    if (creditScore >= 550 && defaultProbability <= 35) return 'Review';\n    return 'Reject';\n  }\n\n  // RBI Compliance Check\n  static checkRBICompliance(userData, loanAmount) {\n    if (loanAmount > 125000) return false; // RBI limit\n    if (userData.existing_loan_emi / userData.monthly_income > 0.5) return false; // EMI ratio\n    return true;\n  }\n\n  // RBI Violations\n  static getRBIViolations(userData, loanAmount) {\n    const violations = [];\n    if (loanAmount > 125000) violations.push('Loan amount exceeds RBI limit of ₹1.25L');\n    if (userData.existing_loan_emi / userData.monthly_income > 0.5) violations.push('EMI-to-income ratio exceeds 50%');\n    return violations;\n  }\n}","map":{"version":3,"names":["RealisticCreditEngine","calculateCreditScore","userData","_loanEligibility$emi_","_loanEligibility$emi_2","profile","buildFinancialProfile","paymentHistoryScore","calculatePaymentHistoryScore","creditUtilizationScore","calculateCreditUtilizationScore","incomeStabilityScore","calculateIncomeStabilityScore","digitalBehaviorScore","calculateDigitalBehaviorScore","weightedScore","creditScore","Math","round","riskBand","getRiskBand","defaultProbability","calculateDefaultProbability","loanEligibility","calculateLoanEligibility","recommendations","generateRecommendations","percentileRank","calculatePercentileRank","peerComparison","generatePeerComparison","user_id","credit_score","risk_band","default_probability","decision","makeDecision","score_components","payment_history","score","weight","credit_utilization","income_stability","digital_behavior","max_eligible_amount","max_amount","recommended_emi","emi_options","emi","optimal_tenure_months","tenure_options","improvement_suggestions","immediate","financial_coaching","coaching","percentile_rank","peer_comparison","rbi_compliant","checkRBICompliance","rbi_violations","getRBIViolations","emi_to_income_ratio","monthly_income","billPaymentScore","electricity_bill_on_time","dth_recharge_on_time","internet_bill_on_time","rent_payment_on_time","loanRepaymentScore","loan_repayment_history_score","defaultPenalty","previous_loan_defaults","max","min","debtToIncomeRatio","existing_loan_emi","credit_card_outstanding","expenseToIncomeRatio","monthly_expenses","utilizationScore","spendingScore","incomeTypeScore","income_type","stabilityBonus","income_stability_months","employmentScore","years_of_employment","savingsScore","savings_rate","upiScore","upi_transactions_per_month","walletScore","digital_wallet_usage","onlineBillScore","online_bill_payments","digitalActivityScore","digital_financial_activity_score","baseProbability","emergency_savings","maxEMICapacity","baseAmount","scoreMultiplier","maxAmount","recommendedAmount","tenureOptions","interestRate","getInterestRate","emiOptions","map","tenure","monthlyRate","pow","totalAmount","totalInterest","total_interest","total_amount","filter","option","eligible","length","recommended_amount","interest_rate_range","overall_bill_payment_score","push","priority","action","impact","emiRatio","debt_to_income_ratio","savings_to_income_ratio","expense_to_income_ratio","payment_consistency_score","bill_payment_reliability","loan_repayment_track_record","digital_payment_adoption","financial_app_usage","online_banking_activity","income_volatility","emergency_fund_adequacy","credit_utilization_pattern","incomeGroup","loanAmount","violations"],"sources":["C:/Projects/micro-credit-risk-analyzer/src/utils/realisticCreditEngine.ts"],"sourcesContent":["import { UserData, RiskScore, FinancialProfile, LoanEligibility, CreditReport } from '../types';\n\nexport class RealisticCreditEngine {\n  \n  // Credit Score Calculation (300-900 scale like CIBIL)\n  static calculateCreditScore(userData: UserData): RiskScore {\n    const profile = this.buildFinancialProfile(userData);\n    \n    // Component Scores (0-100 each)\n    const paymentHistoryScore = this.calculatePaymentHistoryScore(userData);\n    const creditUtilizationScore = this.calculateCreditUtilizationScore(userData);\n    const incomeStabilityScore = this.calculateIncomeStabilityScore(userData);\n    const digitalBehaviorScore = this.calculateDigitalBehaviorScore(userData);\n    \n    // Weighted Score Calculation\n    const weightedScore = \n      (paymentHistoryScore * 0.40) +\n      (creditUtilizationScore * 0.25) +\n      (incomeStabilityScore * 0.20) +\n      (digitalBehaviorScore * 0.15);\n    \n    // Convert to 300-900 scale\n    const creditScore = Math.round(300 + (weightedScore * 6));\n    \n    // Determine Risk Band\n    const riskBand = this.getRiskBand(creditScore);\n    \n    // Calculate Default Probability\n    const defaultProbability = this.calculateDefaultProbability(creditScore, userData);\n    \n    // Loan Eligibility\n    const loanEligibility = this.calculateLoanEligibility(userData, creditScore);\n    \n    // Generate Recommendations\n    const recommendations = this.generateRecommendations(userData, profile);\n    \n    // Peer Comparison\n    const percentileRank = this.calculatePercentileRank(creditScore);\n    const peerComparison = this.generatePeerComparison(percentileRank, userData);\n    \n    return {\n      user_id: userData.user_id,\n      credit_score: creditScore,\n      risk_band: riskBand,\n      default_probability: defaultProbability,\n      decision: this.makeDecision(creditScore, defaultProbability),\n      \n      score_components: {\n        payment_history: { score: paymentHistoryScore, weight: 40 },\n        credit_utilization: { score: creditUtilizationScore, weight: 25 },\n        income_stability: { score: incomeStabilityScore, weight: 20 },\n        digital_behavior: { score: digitalBehaviorScore, weight: 15 }\n      },\n      \n      max_eligible_amount: loanEligibility.max_amount,\n      recommended_emi: loanEligibility.emi_options[0]?.emi || 0,\n      optimal_tenure_months: loanEligibility.tenure_options[0] || 12,\n      \n      improvement_suggestions: recommendations.immediate,\n      financial_coaching: recommendations.coaching,\n      \n      percentile_rank: percentileRank,\n      peer_comparison: peerComparison,\n      \n      rbi_compliant: this.checkRBICompliance(userData, loanEligibility.max_amount),\n      rbi_violations: this.getRBIViolations(userData, loanEligibility.max_amount),\n      emi_to_income_ratio: (loanEligibility.emi_options[0]?.emi || 0) / userData.monthly_income * 100\n    };\n  }\n  \n  // Payment History Score (40% weight)\n  static calculatePaymentHistoryScore(userData: UserData): number {\n    const billPaymentScore = (\n      userData.electricity_bill_on_time * 0.3 +\n      userData.dth_recharge_on_time * 0.2 +\n      userData.internet_bill_on_time * 0.2 +\n      userData.rent_payment_on_time * 0.3\n    );\n    \n    const loanRepaymentScore = userData.loan_repayment_history_score;\n    const defaultPenalty = userData.previous_loan_defaults * 20;\n    \n    return Math.max(0, Math.min(100, \n      (billPaymentScore * 0.6 + loanRepaymentScore * 0.4) - defaultPenalty\n    ));\n  }\n  \n  // Credit Utilization Score (25% weight)\n  static calculateCreditUtilizationScore(userData: UserData): number {\n    const debtToIncomeRatio = (userData.existing_loan_emi + userData.credit_card_outstanding * 0.05) / userData.monthly_income;\n    const expenseToIncomeRatio = userData.monthly_expenses / userData.monthly_income;\n    \n    // Lower ratios = better score\n    const utilizationScore = Math.max(0, 100 - (debtToIncomeRatio * 200));\n    const spendingScore = Math.max(0, 100 - (expenseToIncomeRatio * 100));\n    \n    return (utilizationScore * 0.7 + spendingScore * 0.3);\n  }\n  \n  // Income Stability Score (20% weight)\n  static calculateIncomeStabilityScore(userData: UserData): number {\n    const incomeTypeScore = {\n      'salary': 90,\n      'business': 70,\n      'freelance': 60,\n      'daily_wage': 40\n    }[userData.income_type];\n    \n    const stabilityBonus = Math.min(20, userData.income_stability_months * 2);\n    const employmentScore = Math.min(30, userData.years_of_employment * 5);\n    const savingsScore = Math.min(25, userData.savings_rate * 2.5);\n    \n    return Math.min(100, incomeTypeScore + stabilityBonus + employmentScore + savingsScore);\n  }\n  \n  // Digital Behavior Score (15% weight)\n  static calculateDigitalBehaviorScore(userData: UserData): number {\n    const upiScore = Math.min(30, userData.upi_transactions_per_month * 2);\n    const walletScore = Math.min(25, userData.digital_wallet_usage * 2.5);\n    const onlineBillScore = userData.online_bill_payments * 0.3;\n    const digitalActivityScore = userData.digital_financial_activity_score * 0.15;\n    \n    return upiScore + walletScore + onlineBillScore + digitalActivityScore;\n  }\n  \n  // Risk Band Classification\n  static getRiskBand(creditScore: number): 'Excellent' | 'Good' | 'Fair' | 'Poor' | 'Very Poor' {\n    if (creditScore >= 750) return 'Excellent';\n    if (creditScore >= 650) return 'Good';\n    if (creditScore >= 550) return 'Fair';\n    if (creditScore >= 450) return 'Poor';\n    return 'Very Poor';\n  }\n  \n  // Default Probability Calculation\n  static calculateDefaultProbability(creditScore: number, userData: UserData): number {\n    let baseProbability = Math.max(1, 50 - ((creditScore - 300) / 12));\n    \n    // Adjust based on specific risk factors\n    if (userData.previous_loan_defaults > 0) baseProbability += userData.previous_loan_defaults * 15;\n    if (userData.existing_loan_emi / userData.monthly_income > 0.5) baseProbability += 10;\n    if (userData.emergency_savings < userData.monthly_expenses) baseProbability += 8;\n    \n    return Math.min(95, Math.max(1, Math.round(baseProbability)));\n  }\n  \n  // Loan Eligibility Calculation\n  static calculateLoanEligibility(userData: UserData, creditScore: number): LoanEligibility {\n    const maxEMICapacity = userData.monthly_income * 0.4 - userData.existing_loan_emi;\n    const baseAmount = Math.min(125000, userData.monthly_income * 10); // RBI limit\n    \n    // Adjust based on credit score\n    const scoreMultiplier = creditScore >= 750 ? 1.0 : \n                           creditScore >= 650 ? 0.8 : \n                           creditScore >= 550 ? 0.6 : 0.4;\n    \n    const maxAmount = Math.round(baseAmount * scoreMultiplier);\n    const recommendedAmount = Math.round(maxAmount * 0.7);\n    \n    const tenureOptions = [12, 18, 24, 36];\n    const interestRate = this.getInterestRate(creditScore);\n    \n    const emiOptions = tenureOptions.map(tenure => {\n      const monthlyRate = interestRate / 100 / 12;\n      const emi = Math.round((recommendedAmount * monthlyRate * Math.pow(1 + monthlyRate, tenure)) / \n                            (Math.pow(1 + monthlyRate, tenure) - 1));\n      const totalAmount = emi * tenure;\n      const totalInterest = totalAmount - recommendedAmount;\n      \n      return { tenure, emi, total_interest: totalInterest, total_amount: totalAmount };\n    }).filter(option => option.emi <= maxEMICapacity);\n    \n    return {\n      eligible: maxAmount > 10000 && emiOptions.length > 0,\n      max_amount: maxAmount,\n      recommended_amount: recommendedAmount,\n      tenure_options: tenureOptions,\n      interest_rate_range: { min: interestRate, max: interestRate + 2 },\n      emi_options: emiOptions\n    };\n  }\n  \n  // Interest Rate Based on Credit Score\n  static getInterestRate(creditScore: number): number {\n    if (creditScore >= 750) return 18;\n    if (creditScore >= 650) return 22;\n    if (creditScore >= 550) return 24;\n    return 26; // RBI cap\n  }\n  \n  // Generate Personalized Recommendations\n  static generateRecommendations(userData: UserData, profile: FinancialProfile) {\n    const immediate: string[] = [];\n    const coaching: Array<{priority: 'high' | 'medium' | 'low'; action: string; impact: string}> = [];\n    \n    // Payment History Improvements\n    if (userData.overall_bill_payment_score < 80) {\n      immediate.push(\"Set up auto-pay for all utility bills to improve payment consistency\");\n      coaching.push({\n        priority: 'high',\n        action: \"Enable auto-debit for electricity, DTH, and internet bills\",\n        impact: \"Can improve credit score by 30-50 points in 3 months\"\n      });\n    }\n    \n    // EMI Management\n    const emiRatio = userData.existing_loan_emi / userData.monthly_income;\n    if (emiRatio > 0.4) {\n      immediate.push(`Your EMI-to-income ratio is ${Math.round(emiRatio * 100)}% (too high). Reduce EMIs below 40% to improve score`);\n      coaching.push({\n        priority: 'high',\n        action: \"Consider loan restructuring or prepayment to reduce EMI burden\",\n        impact: \"Reducing EMI ratio to 30% can improve eligibility by ₹25,000\"\n      });\n    }\n    \n    // Digital Behavior\n    if (userData.upi_transactions_per_month < 20) {\n      immediate.push(\"Increase UPI transactions to build stronger digital payment history\");\n      coaching.push({\n        priority: 'medium',\n        action: \"Use UPI for daily transactions like groceries, fuel, and small purchases\",\n        impact: \"Higher digital activity can boost score by 15-25 points\"\n      });\n    }\n    \n    // Emergency Savings\n    if (userData.emergency_savings < userData.monthly_expenses * 3) {\n      immediate.push(`Build emergency fund to ₹${userData.monthly_expenses * 3} (3 months expenses)`);\n      coaching.push({\n        priority: 'medium',\n        action: `Save ₹${Math.round((userData.monthly_expenses * 3 - userData.emergency_savings) / 6)} per month for 6 months`,\n        impact: \"Adequate emergency fund reduces default risk and improves loan terms\"\n      });\n    }\n    \n    // Savings Rate\n    if (userData.savings_rate < 20) {\n      immediate.push(\"Increase savings rate to at least 20% of income for better financial health\");\n      coaching.push({\n        priority: 'low',\n        action: \"Track expenses and identify areas to cut discretionary spending\",\n        impact: \"Higher savings rate demonstrates financial discipline\"\n      });\n    }\n    \n    return { immediate, coaching };\n  }\n  \n  // Build Financial Profile\n  static buildFinancialProfile(userData: UserData): FinancialProfile {\n    return {\n      debt_to_income_ratio: (userData.existing_loan_emi * 12) / (userData.monthly_income * 12),\n      savings_to_income_ratio: userData.savings_rate / 100,\n      expense_to_income_ratio: userData.monthly_expenses / userData.monthly_income,\n      \n      payment_consistency_score: userData.overall_bill_payment_score,\n      bill_payment_reliability: (userData.electricity_bill_on_time + userData.dth_recharge_on_time + \n                                userData.internet_bill_on_time + userData.rent_payment_on_time) / 4,\n      loan_repayment_track_record: userData.loan_repayment_history_score,\n      \n      digital_payment_adoption: userData.digital_financial_activity_score,\n      financial_app_usage: userData.digital_wallet_usage,\n      online_banking_activity: userData.online_bill_payments,\n      \n      income_volatility: userData.income_type === 'salary' ? 10 : \n                        userData.income_type === 'business' ? 30 : 50,\n      emergency_fund_adequacy: (userData.emergency_savings / userData.monthly_expenses) * 33.33,\n      credit_utilization_pattern: (userData.credit_card_outstanding / userData.monthly_income) * 100\n    };\n  }\n  \n  // Calculate Percentile Rank\n  static calculatePercentileRank(creditScore: number): number {\n    // Simulated distribution based on Indian credit score patterns\n    if (creditScore >= 800) return 95;\n    if (creditScore >= 750) return 85;\n    if (creditScore >= 700) return 70;\n    if (creditScore >= 650) return 55;\n    if (creditScore >= 600) return 40;\n    if (creditScore >= 550) return 25;\n    return 10;\n  }\n  \n  // Generate Peer Comparison\n  static generatePeerComparison(percentileRank: number, userData: UserData): string {\n    const incomeGroup = userData.monthly_income >= 50000 ? 'high-income' :\n                       userData.monthly_income >= 25000 ? 'middle-income' : 'entry-level';\n    \n    return `You are better than ${percentileRank}% of borrowers in the ${incomeGroup} category`;\n  }\n  \n  // Decision Making\n  static makeDecision(creditScore: number, defaultProbability: number): 'Approve' | 'Review' | 'Reject' {\n    if (creditScore >= 650 && defaultProbability <= 20) return 'Approve';\n    if (creditScore >= 550 && defaultProbability <= 35) return 'Review';\n    return 'Reject';\n  }\n  \n  // RBI Compliance Check\n  static checkRBICompliance(userData: UserData, loanAmount: number): boolean {\n    if (loanAmount > 125000) return false; // RBI limit\n    if ((userData.existing_loan_emi / userData.monthly_income) > 0.5) return false; // EMI ratio\n    return true;\n  }\n  \n  // RBI Violations\n  static getRBIViolations(userData: UserData, loanAmount: number): string[] {\n    const violations: string[] = [];\n    \n    if (loanAmount > 125000) violations.push('Loan amount exceeds RBI limit of ₹1.25L');\n    if ((userData.existing_loan_emi / userData.monthly_income) > 0.5) violations.push('EMI-to-income ratio exceeds 50%');\n    \n    return violations;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}