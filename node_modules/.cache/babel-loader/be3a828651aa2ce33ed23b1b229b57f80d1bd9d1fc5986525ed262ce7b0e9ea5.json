{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api';\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          detail: 'Unknown error'\n        }));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Network error occurred');\n    }\n  }\n\n  // Authentication endpoints\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  // Loan application endpoints\n  async applyForLoan(application, userId) {\n    return this.request(`/loan/apply?user_id=${userId}`, {\n      method: 'POST',\n      body: JSON.stringify(application)\n    });\n  }\n  async getCreditScore(userId) {\n    return this.request(`/user/${userId}/credit-score`);\n  }\n\n  // Admin endpoints\n  async getAdminDashboard() {\n    return this.request('/admin/dashboard');\n  }\n  async getAllUsersWithScores() {\n    return this.request('/admin/users');\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      await fetch(`${API_BASE_URL.replace('/api', '')}/docs`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","detail","Error","status","error","login","credentials","method","body","JSON","stringify","register","userData","applyForLoan","application","userId","getCreditScore","getAdminDashboard","getAllUsersWithScores","healthCheck","replace","apiService"],"sources":["C:/Projects/micro-credit-risk-analyzer/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string;\n  phone: string;\n  address: string;\n  date_of_birth: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n  phone: string;\n  address: string;\n  date_of_birth: string;\n}\n\nexport interface LoanApplication {\n  monthly_income: number;\n  existing_debt: number;\n  loan_purpose: string;\n  requested_amount: number;\n}\n\nexport interface CreditScore {\n  score: number;\n  grade: string;\n  eligibility: string;\n  max_loan_amount: number;\n  recommended_amount: number;\n  interest_rate: number;\n  emi_amount: number;\n  emi_to_income_ratio: number;\n  rbi_compliant: boolean;\n  factors: {\n    income: number;\n    debt: number;\n    purpose: number;\n    amount: number;\n  };\n}\n\nexport interface AdminDashboard {\n  total_users: number;\n  approved_count: number;\n  review_count: number;\n  rejected_count: number;\n  avg_score: number;\n  rbi_compliance_rate: number;\n  avg_eligible_loan_amount: number;\n  excellent_credit_count: number;\n  good_credit_count: number;\n  poor_credit_count: number;\n  common_violations: any[];\n}\n\nexport interface UserWithScore {\n  user_id: number;\n  name: string;\n  email: string;\n  phone: string;\n  monthly_income: number;\n  existing_debt: number;\n  requested_amount: number;\n  loan_purpose: string;\n  risk_score: number;\n  decision: string;\n  eligible_loan_amount: number;\n  emi_to_income_ratio: number;\n  rbi_compliant: boolean;\n}\n\nclass ApiService {\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Network error occurred');\n    }\n  }\n\n  // Authentication endpoints\n  async login(credentials: LoginCredentials): Promise<{ message: string; user: User }> {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n  }\n\n  async register(userData: RegisterData): Promise<{ message: string; user_id: number }> {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  // Loan application endpoints\n  async applyForLoan(application: LoanApplication, userId: number): Promise<{ application_id: number; credit_score: CreditScore }> {\n    return this.request(`/loan/apply?user_id=${userId}`, {\n      method: 'POST',\n      body: JSON.stringify(application),\n    });\n  }\n\n  async getCreditScore(userId: number): Promise<CreditScore> {\n    return this.request(`/user/${userId}/credit-score`);\n  }\n\n  // Admin endpoints\n  async getAdminDashboard(): Promise<AdminDashboard> {\n    return this.request('/admin/dashboard');\n  }\n\n  async getAllUsersWithScores(): Promise<UserWithScore[]> {\n    return this.request('/admin/users');\n  }\n\n  // Health check\n  async healthCheck(): Promise<boolean> {\n    try {\n      await fetch(`${API_BASE_URL.replace('/api', '')}/docs`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAgFhD,MAAMC,UAAU,CAAC;EACf,MAAcC,OAAOA,CAAIC,QAAgB,EAAEC,OAAoB,GAAG,CAAC,CAAC,EAAc;IAChF,MAAMC,GAAG,GAAG,GAAGL,YAAY,GAAGG,QAAQ,EAAE;IACxC,MAAMG,MAAmB,GAAG;MAC1BC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;UAAEC,MAAM,EAAE;QAAgB,CAAC,CAAC,CAAC;QAClF,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,MAAM,IAAI,uBAAuBN,QAAQ,CAACQ,MAAM,EAAE,CAAC;MAC/E;MAEA,OAAO,MAAMR,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYF,KAAK,EAAE;QAC1B,MAAME,KAAK;MACb;MACA,MAAM,IAAIF,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF;;EAEA;EACA,MAAMG,KAAKA,CAACC,WAA6B,EAA4C;IACnF,OAAO,IAAI,CAACjB,OAAO,CAAC,aAAa,EAAE;MACjCkB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;IAClC,CAAC,CAAC;EACJ;EAEA,MAAMK,QAAQA,CAACC,QAAsB,EAAiD;IACpF,OAAO,IAAI,CAACvB,OAAO,CAAC,gBAAgB,EAAE;MACpCkB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,QAAQ;IAC/B,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,YAAYA,CAACC,WAA4B,EAAEC,MAAc,EAAkE;IAC/H,OAAO,IAAI,CAAC1B,OAAO,CAAC,uBAAuB0B,MAAM,EAAE,EAAE;MACnDR,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,WAAW;IAClC,CAAC,CAAC;EACJ;EAEA,MAAME,cAAcA,CAACD,MAAc,EAAwB;IACzD,OAAO,IAAI,CAAC1B,OAAO,CAAC,SAAS0B,MAAM,eAAe,CAAC;EACrD;;EAEA;EACA,MAAME,iBAAiBA,CAAA,EAA4B;IACjD,OAAO,IAAI,CAAC5B,OAAO,CAAC,kBAAkB,CAAC;EACzC;EAEA,MAAM6B,qBAAqBA,CAAA,EAA6B;IACtD,OAAO,IAAI,CAAC7B,OAAO,CAAC,cAAc,CAAC;EACrC;;EAEA;EACA,MAAM8B,WAAWA,CAAA,EAAqB;IACpC,IAAI;MACF,MAAMvB,KAAK,CAAC,GAAGT,YAAY,CAACiC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC;MACvD,OAAO,IAAI;IACb,CAAC,CAAC,MAAM;MACN,OAAO,KAAK;IACd;EACF;AACF;AAEA,OAAO,MAAMC,UAAU,GAAG,IAAIjC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}