{"ast":null,"code":"import _objectSpread from\"C:/Projects/micro-credit-risk-analyzer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_BASE_URL='http://localhost:8000/api';class ApiService{async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=\"\".concat(API_BASE_URL).concat(endpoint);const config=_objectSpread({headers:_objectSpread({'Content-Type':'application/json'},options.headers)},options);try{const response=await fetch(url,config);if(!response.ok){const errorData=await response.json().catch(()=>({detail:'Unknown error'}));throw new Error(errorData.detail||\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){if(error instanceof Error){throw error;}throw new Error('Network error occurred');}}// Authentication endpoints\nasync login(credentials){return this.request('/auth/login',{method:'POST',body:JSON.stringify(credentials)});}async register(userData){return this.request('/auth/register',{method:'POST',body:JSON.stringify(userData)});}// Loan application endpoints\nasync applyForLoan(application,userId){return this.request(\"/loan/apply?user_id=\".concat(userId),{method:'POST',body:JSON.stringify(application)});}async getCreditScore(userId){return this.request(\"/user/\".concat(userId,\"/credit-score\"));}// Admin endpoints\nasync getAdminDashboard(){return this.request('/admin/dashboard');}async getAllUsersWithScores(){return this.request('/admin/users');}// Add new transaction\nasync addTransaction(userId,transaction){const response=await fetch(\"http://localhost:8000/add-transaction/\".concat(userId),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(transaction)});if(!response.ok){throw new Error('Failed to add transaction');}return response.json();}async clearTransactions(userId){const response=await fetch(\"http://localhost:8000/clear-transactions/\".concat(userId),{method:'DELETE'});if(!response.ok){throw new Error('Failed to clear transactions');}return response.json();}// Get user transactions\nasync getUserTransactions(userId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;try{const response=await fetch(\"http://localhost:8000/transactions/\".concat(userId,\"?limit=\").concat(limit));if(!response.ok)throw new Error('Failed to fetch transactions');return await response.json();}catch(error){console.error('Error fetching transactions:',error);// Return mock data as fallback\nreturn{transactions:[{type:'electricity',amount:2500,status:'paid_on_time',provider:'BSES',description:'Electricity Bill',date:new Date().toISOString(),days_late:0}]};}}// Get score history\nasync getScoreHistory(userId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{const response=await fetch(\"http://localhost:8000/score-history/\".concat(userId,\"?limit=\").concat(limit));if(!response.ok)throw new Error('Failed to fetch score history');return await response.json();}catch(error){console.error('Error fetching score history:',error);// Return mock data as fallback\nreturn{score_history:[]};}}// Get user credit score with dynamic scoring\nasync getUserScore(userId){try{const response=await fetch(\"http://localhost:8000/user-score/\".concat(userId));if(!response.ok)throw new Error('Failed to fetch user score');return await response.json();}catch(error){console.error('Error fetching user score:',error);// Return mock data as fallback\nreturn{score:72,grade:'B+',eligibility:'approved',factors:[{category:'Payment History',impact:15,details:'Good payment track record'},{category:'Income Stability',impact:8,details:'Regular salary credits'}]};}}// Health check\nasync healthCheck(){try{await fetch(\"\".concat(API_BASE_URL.replace('/api',''),\"/docs\"));return true;}catch(_unused){return false;}}}export const apiService=new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","arguments","length","undefined","url","concat","config","_objectSpread","headers","response","fetch","ok","errorData","json","catch","detail","Error","status","error","login","credentials","method","body","JSON","stringify","register","userData","applyForLoan","application","userId","getCreditScore","getAdminDashboard","getAllUsersWithScores","addTransaction","transaction","clearTransactions","getUserTransactions","limit","console","transactions","type","amount","provider","description","date","Date","toISOString","days_late","getScoreHistory","score_history","getUserScore","score","grade","eligibility","factors","category","impact","details","healthCheck","replace","_unused","apiService"],"sources":["C:/Projects/micro-credit-risk-analyzer/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n  phone: string;\r\n  address: string;\r\n  date_of_birth: string;\r\n}\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData {\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  phone: string;\r\n  address: string;\r\n  date_of_birth: string;\r\n}\r\n\r\nexport interface LoanApplication {\r\n  monthly_income: number;\r\n  existing_debt: number;\r\n  loan_purpose: string;\r\n  requested_amount: number;\r\n}\r\n\r\nexport interface CreditScore {\r\n  score: number;\r\n  grade: string;\r\n  eligibility: string;\r\n  max_loan_amount: number;\r\n  recommended_amount: number;\r\n  interest_rate: number;\r\n  emi_amount: number;\r\n  emi_to_income_ratio: number;\r\n  rbi_compliant: boolean;\r\n  monthly_income?: number;\r\n  existing_debt?: number;\r\n  loan_purpose?: string;\r\n  requested_amount?: number;\r\n  factors: {\r\n    income: number;\r\n    debt: number;\r\n    purpose: number;\r\n    amount: number;\r\n  };\r\n}\r\n\r\nexport interface AdminDashboard {\r\n  total_users: number;\r\n  approved_count: number;\r\n  review_count: number;\r\n  rejected_count: number;\r\n  avg_score: number;\r\n  rbi_compliance_rate: number;\r\n  avg_eligible_loan_amount: number;\r\n  excellent_credit_count: number;\r\n  good_credit_count: number;\r\n  poor_credit_count: number;\r\n  common_violations: any[];\r\n}\r\n\r\nexport interface UserWithScore {\r\n  user_id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  monthly_income: number;\r\n  existing_debt: number;\r\n  requested_amount: number;\r\n  loan_purpose: string;\r\n  risk_score: number;\r\n  decision: string;\r\n  eligible_loan_amount: number;\r\n  emi_to_income_ratio: number;\r\n  rbi_compliant: boolean;\r\n}\r\n\r\nclass ApiService {\r\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const config: RequestInit = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('Network error occurred');\r\n    }\r\n  }\r\n\r\n  // Authentication endpoints\r\n  async login(credentials: LoginCredentials): Promise<{ message: string; user: User }> {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  }\r\n\r\n  async register(userData: RegisterData): Promise<{ message: string; user_id: number }> {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  // Loan application endpoints\r\n  async applyForLoan(application: LoanApplication, userId: number): Promise<{ application_id: number; credit_score: CreditScore }> {\r\n    return this.request(`/loan/apply?user_id=${userId}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(application),\r\n    });\r\n  }\r\n\r\n  async getCreditScore(userId: number): Promise<CreditScore> {\r\n    return this.request(`/user/${userId}/credit-score`);\r\n  }\r\n\r\n  // Admin endpoints\r\n  async getAdminDashboard(): Promise<AdminDashboard> {\r\n    return this.request('/admin/dashboard');\r\n  }\r\n\r\n  async getAllUsersWithScores(): Promise<UserWithScore[]> {\r\n    return this.request('/admin/users');\r\n  }\r\n\r\n  // Add new transaction\r\n  async addTransaction(userId: number, transaction: any): Promise<any> {\r\n    const response = await fetch(`http://localhost:8000/add-transaction/${userId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(transaction),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to add transaction');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async clearTransactions(userId: number): Promise<any> {\r\n    const response = await fetch(`http://localhost:8000/clear-transactions/${userId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to clear transactions');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Get user transactions\r\n  async getUserTransactions(userId: number, limit: number = 20) {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/transactions/${userId}?limit=${limit}`);\r\n      if (!response.ok) throw new Error('Failed to fetch transactions');\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching transactions:', error);\r\n      // Return mock data as fallback\r\n      return {\r\n        transactions: [\r\n          {\r\n            type: 'electricity',\r\n            amount: 2500,\r\n            status: 'paid_on_time',\r\n            provider: 'BSES',\r\n            description: 'Electricity Bill',\r\n            date: new Date().toISOString(),\r\n            days_late: 0\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get score history\r\n  async getScoreHistory(userId: number, limit: number = 10) {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/score-history/${userId}?limit=${limit}`);\r\n      if (!response.ok) throw new Error('Failed to fetch score history');\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching score history:', error);\r\n      // Return mock data as fallback\r\n      return {\r\n        score_history: []\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get user credit score with dynamic scoring\r\n  async getUserScore(userId: number) {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/user-score/${userId}`);\r\n      if (!response.ok) throw new Error('Failed to fetch user score');\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching user score:', error);\r\n      // Return mock data as fallback\r\n      return {\r\n        score: 72,\r\n        grade: 'B+',\r\n        eligibility: 'approved',\r\n        factors: [\r\n          { category: 'Payment History', impact: 15, details: 'Good payment track record' },\r\n          { category: 'Income Stability', impact: 8, details: 'Regular salary credits' }\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck(): Promise<boolean> {\r\n    try {\r\n      await fetch(`${API_BASE_URL.replace('/api', '')}/docs`);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}