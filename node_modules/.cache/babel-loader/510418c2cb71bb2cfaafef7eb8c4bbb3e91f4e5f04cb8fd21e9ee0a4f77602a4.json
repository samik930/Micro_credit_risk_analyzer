{"ast":null,"code":"// RBI Guidelines for Micro Credit Lending\n// Based on RBI Master Direction on Microfinance Institutions (NBFC-MFIs) Direction, 2011\n\nexport class RBIComplianceEngine {\n  // Minimum 24 months for loans above Rs. 15,000\n\n  /**\n   * Check RBI compliance for a borrower\n   */\n  static checkCompliance(profile, requestedAmount, proposedRate, tenureMonths) {\n    const violations = [];\n    let riskAdjustment = 0;\n\n    // 1. Loan Amount Limit Check\n    if (requestedAmount > this.LOAN_LIMITS.maxLoanAmount) {\n      violations.push(`Loan amount exceeds RBI limit of Rs. ${this.LOAN_LIMITS.maxLoanAmount}`);\n      riskAdjustment -= 15;\n    }\n\n    // 2. Total Indebtedness Check\n    const totalDebt = profile.existing_loan_amount + requestedAmount;\n    if (totalDebt > this.LOAN_LIMITS.maxTotalIndebtedness) {\n      violations.push(`Total indebtedness exceeds RBI limit of Rs. ${this.LOAN_LIMITS.maxTotalIndebtedness}`);\n      riskAdjustment -= 10;\n    }\n\n    // 3. Income Threshold Check\n    if (profile.monthly_income < this.LOAN_LIMITS.minIncomeThreshold) {\n      violations.push(`Monthly income below minimum threshold of Rs. ${this.LOAN_LIMITS.minIncomeThreshold}`);\n      riskAdjustment -= 20;\n    }\n\n    // 4. Interest Rate Cap Check\n    if (proposedRate > this.INTEREST_RATE_CAP) {\n      violations.push(`Interest rate exceeds RBI cap of ${this.INTEREST_RATE_CAP}%`);\n      riskAdjustment -= 5;\n    }\n\n    // 5. Minimum Tenure Check (for loans above Rs. 15,000)\n    if (requestedAmount > 15000 && tenureMonths < this.MIN_TENURE_MONTHS) {\n      violations.push(`Tenure below minimum ${this.MIN_TENURE_MONTHS} months for loans above Rs. 15,000`);\n      riskAdjustment -= 5;\n    }\n\n    // 6. Income-to-EMI Ratio Check (EMI should not exceed 50% of monthly income)\n    const monthlyEMI = this.calculateEMI(requestedAmount, proposedRate, tenureMonths);\n    const emiToIncomeRatio = monthlyEMI / profile.monthly_income * 100;\n    if (emiToIncomeRatio > 50) {\n      violations.push(`EMI-to-income ratio (${emiToIncomeRatio.toFixed(1)}%) exceeds 50%`);\n      riskAdjustment -= 10;\n    } else if (emiToIncomeRatio < 30) {\n      riskAdjustment += 5; // Bonus for conservative EMI ratio\n    }\n\n    // 7. Collateral-Free Lending Compliance\n    if (!profile.collateral_free) {\n      violations.push('RBI mandates collateral-free lending for microfinance');\n      riskAdjustment -= 5;\n    }\n\n    // 8. Purpose of Loan Check (productive purposes preferred)\n    const productivePurposes = ['business', 'agriculture', 'livestock', 'education', 'healthcare'];\n    if (productivePurposes.includes(profile.purpose_of_loan.toLowerCase())) {\n      riskAdjustment += 3;\n    }\n    return {\n      isCompliant: violations.length === 0,\n      violations,\n      riskAdjustment: Math.max(-20, Math.min(10, riskAdjustment))\n    };\n  }\n\n  /**\n   * Calculate EMI using standard formula\n   */\n  static calculateEMI(principal, annualRate, tenureMonths) {\n    const monthlyRate = annualRate / (12 * 100);\n    const emi = principal * monthlyRate * Math.pow(1 + monthlyRate, tenureMonths) / (Math.pow(1 + monthlyRate, tenureMonths) - 1);\n    return emi;\n  }\n\n  /**\n   * Get RBI-compliant loan recommendations\n   */\n  static getRecommendations(profile) {\n    const warnings = [];\n\n    // Calculate maximum loan amount based on income\n    const maxByIncome = Math.min(profile.monthly_income * 0.5 * 24,\n    // 50% of income for 24 months\n    this.LOAN_LIMITS.maxLoanAmount);\n\n    // Consider existing debt\n    const maxByDebt = this.LOAN_LIMITS.maxTotalIndebtedness - profile.existing_loan_amount;\n    const maxRecommendedAmount = Math.min(maxByIncome, maxByDebt);\n    if (maxRecommendedAmount <= 0) {\n      warnings.push('Borrower not eligible due to existing debt levels');\n    }\n    if (profile.monthly_income < this.LOAN_LIMITS.minIncomeThreshold) {\n      warnings.push('Income below RBI minimum threshold');\n    }\n    return {\n      maxRecommendedAmount: Math.max(0, maxRecommendedAmount),\n      recommendedTenure: maxRecommendedAmount > 15000 ? 36 : 12,\n      maxInterestRate: this.INTEREST_RATE_CAP,\n      warnings\n    };\n  }\n\n  /**\n   * Generate RBI compliance report\n   */\n  static generateComplianceReport(profiles, decisions) {\n    const violationCounts = new Map();\n    let compliantCount = 0;\n    profiles.forEach(profile => {\n      const decision = decisions.find(d => d.user_id === profile.user_id);\n      if (decision) {\n        const compliance = this.checkCompliance(profile, decision.amount, 24, 24);\n        if (compliance.isCompliant) compliantCount++;\n        compliance.violations.forEach(violation => {\n          violationCounts.set(violation, (violationCounts.get(violation) || 0) + 1);\n        });\n      }\n    });\n    const commonViolations = Array.from(violationCounts.entries()).map(([violation, count]) => ({\n      violation,\n      count\n    })).sort((a, b) => b.count - a.count).slice(0, 5);\n    return {\n      totalApplications: profiles.length,\n      compliantApplications: compliantCount,\n      complianceRate: compliantCount / profiles.length * 100,\n      commonViolations,\n      riskDistribution: {\n        low: decisions.filter(d => d.decision === 'Approve').length,\n        medium: decisions.filter(d => d.decision === 'Review').length,\n        high: decisions.filter(d => d.decision === 'Reject').length\n      }\n    };\n  }\n}\nRBIComplianceEngine.LOAN_LIMITS = {\n  maxLoanAmount: 125000,\n  // Rs. 1.25 lakh per borrower\n  maxTotalIndebtedness: 100000,\n  // Rs. 1 lakh total outstanding\n  minIncomeThreshold: 5000 // Minimum monthly income\n};\nRBIComplianceEngine.INTEREST_RATE_CAP = 26;\n// 26% per annum\nRBIComplianceEngine.MIN_TENURE_MONTHS = 24;","map":{"version":3,"names":["RBIComplianceEngine","checkCompliance","profile","requestedAmount","proposedRate","tenureMonths","violations","riskAdjustment","LOAN_LIMITS","maxLoanAmount","push","totalDebt","existing_loan_amount","maxTotalIndebtedness","monthly_income","minIncomeThreshold","INTEREST_RATE_CAP","MIN_TENURE_MONTHS","monthlyEMI","calculateEMI","emiToIncomeRatio","toFixed","collateral_free","productivePurposes","includes","purpose_of_loan","toLowerCase","isCompliant","length","Math","max","min","principal","annualRate","monthlyRate","emi","pow","getRecommendations","warnings","maxByIncome","maxByDebt","maxRecommendedAmount","recommendedTenure","maxInterestRate","generateComplianceReport","profiles","decisions","violationCounts","Map","compliantCount","forEach","decision","find","d","user_id","compliance","amount","violation","set","get","commonViolations","Array","from","entries","map","count","sort","a","b","slice","totalApplications","compliantApplications","complianceRate","riskDistribution","low","filter","medium","high"],"sources":["C:/Projects/micro-credit-risk-analyzer/src/utils/rbiGuidelines.ts"],"sourcesContent":["// RBI Guidelines for Micro Credit Lending\n// Based on RBI Master Direction on Microfinance Institutions (NBFC-MFIs) Direction, 2011\n\nexport interface RBIComplianceCheck {\n  isCompliant: boolean;\n  violations: string[];\n  riskAdjustment: number; // -20 to +10 points\n}\n\nexport interface RBILoanLimits {\n  maxLoanAmount: number;\n  maxTotalIndebtedness: number;\n  minIncomeThreshold: number;\n}\n\nexport interface RBIBorrowerProfile {\n  user_id: string;\n  monthly_income: number;\n  existing_loan_amount: number;\n  household_income: number;\n  rural_urban_classification: 'rural' | 'urban';\n  purpose_of_loan: string;\n  collateral_free: boolean;\n}\n\nexport class RBIComplianceEngine {\n  private static readonly LOAN_LIMITS: RBILoanLimits = {\n    maxLoanAmount: 125000, // Rs. 1.25 lakh per borrower\n    maxTotalIndebtedness: 100000, // Rs. 1 lakh total outstanding\n    minIncomeThreshold: 5000 // Minimum monthly income\n  };\n\n  private static readonly INTEREST_RATE_CAP = 26; // 26% per annum\n  private static readonly MIN_TENURE_MONTHS = 24; // Minimum 24 months for loans above Rs. 15,000\n\n  /**\n   * Check RBI compliance for a borrower\n   */\n  static checkCompliance(\n    profile: RBIBorrowerProfile,\n    requestedAmount: number,\n    proposedRate: number,\n    tenureMonths: number\n  ): RBIComplianceCheck {\n    const violations: string[] = [];\n    let riskAdjustment = 0;\n\n    // 1. Loan Amount Limit Check\n    if (requestedAmount > this.LOAN_LIMITS.maxLoanAmount) {\n      violations.push(`Loan amount exceeds RBI limit of Rs. ${this.LOAN_LIMITS.maxLoanAmount}`);\n      riskAdjustment -= 15;\n    }\n\n    // 2. Total Indebtedness Check\n    const totalDebt = profile.existing_loan_amount + requestedAmount;\n    if (totalDebt > this.LOAN_LIMITS.maxTotalIndebtedness) {\n      violations.push(`Total indebtedness exceeds RBI limit of Rs. ${this.LOAN_LIMITS.maxTotalIndebtedness}`);\n      riskAdjustment -= 10;\n    }\n\n    // 3. Income Threshold Check\n    if (profile.monthly_income < this.LOAN_LIMITS.minIncomeThreshold) {\n      violations.push(`Monthly income below minimum threshold of Rs. ${this.LOAN_LIMITS.minIncomeThreshold}`);\n      riskAdjustment -= 20;\n    }\n\n    // 4. Interest Rate Cap Check\n    if (proposedRate > this.INTEREST_RATE_CAP) {\n      violations.push(`Interest rate exceeds RBI cap of ${this.INTEREST_RATE_CAP}%`);\n      riskAdjustment -= 5;\n    }\n\n    // 5. Minimum Tenure Check (for loans above Rs. 15,000)\n    if (requestedAmount > 15000 && tenureMonths < this.MIN_TENURE_MONTHS) {\n      violations.push(`Tenure below minimum ${this.MIN_TENURE_MONTHS} months for loans above Rs. 15,000`);\n      riskAdjustment -= 5;\n    }\n\n    // 6. Income-to-EMI Ratio Check (EMI should not exceed 50% of monthly income)\n    const monthlyEMI = this.calculateEMI(requestedAmount, proposedRate, tenureMonths);\n    const emiToIncomeRatio = (monthlyEMI / profile.monthly_income) * 100;\n    \n    if (emiToIncomeRatio > 50) {\n      violations.push(`EMI-to-income ratio (${emiToIncomeRatio.toFixed(1)}%) exceeds 50%`);\n      riskAdjustment -= 10;\n    } else if (emiToIncomeRatio < 30) {\n      riskAdjustment += 5; // Bonus for conservative EMI ratio\n    }\n\n    // 7. Collateral-Free Lending Compliance\n    if (!profile.collateral_free) {\n      violations.push('RBI mandates collateral-free lending for microfinance');\n      riskAdjustment -= 5;\n    }\n\n    // 8. Purpose of Loan Check (productive purposes preferred)\n    const productivePurposes = ['business', 'agriculture', 'livestock', 'education', 'healthcare'];\n    if (productivePurposes.includes(profile.purpose_of_loan.toLowerCase())) {\n      riskAdjustment += 3;\n    }\n\n    return {\n      isCompliant: violations.length === 0,\n      violations,\n      riskAdjustment: Math.max(-20, Math.min(10, riskAdjustment))\n    };\n  }\n\n  /**\n   * Calculate EMI using standard formula\n   */\n  private static calculateEMI(principal: number, annualRate: number, tenureMonths: number): number {\n    const monthlyRate = annualRate / (12 * 100);\n    const emi = (principal * monthlyRate * Math.pow(1 + monthlyRate, tenureMonths)) / \n                (Math.pow(1 + monthlyRate, tenureMonths) - 1);\n    return emi;\n  }\n\n  /**\n   * Get RBI-compliant loan recommendations\n   */\n  static getRecommendations(profile: RBIBorrowerProfile): {\n    maxRecommendedAmount: number;\n    recommendedTenure: number;\n    maxInterestRate: number;\n    warnings: string[];\n  } {\n    const warnings: string[] = [];\n    \n    // Calculate maximum loan amount based on income\n    const maxByIncome = Math.min(\n      profile.monthly_income * 0.5 * 24, // 50% of income for 24 months\n      this.LOAN_LIMITS.maxLoanAmount\n    );\n    \n    // Consider existing debt\n    const maxByDebt = this.LOAN_LIMITS.maxTotalIndebtedness - profile.existing_loan_amount;\n    \n    const maxRecommendedAmount = Math.min(maxByIncome, maxByDebt);\n    \n    if (maxRecommendedAmount <= 0) {\n      warnings.push('Borrower not eligible due to existing debt levels');\n    }\n    \n    if (profile.monthly_income < this.LOAN_LIMITS.minIncomeThreshold) {\n      warnings.push('Income below RBI minimum threshold');\n    }\n\n    return {\n      maxRecommendedAmount: Math.max(0, maxRecommendedAmount),\n      recommendedTenure: maxRecommendedAmount > 15000 ? 36 : 12,\n      maxInterestRate: this.INTEREST_RATE_CAP,\n      warnings\n    };\n  }\n\n  /**\n   * Generate RBI compliance report\n   */\n  static generateComplianceReport(\n    profiles: RBIBorrowerProfile[],\n    decisions: Array<{user_id: string; decision: string; amount: number}>\n  ): {\n    totalApplications: number;\n    compliantApplications: number;\n    complianceRate: number;\n    commonViolations: Array<{violation: string; count: number}>;\n    riskDistribution: {low: number; medium: number; high: number};\n  } {\n    const violationCounts = new Map<string, number>();\n    let compliantCount = 0;\n    \n    profiles.forEach(profile => {\n      const decision = decisions.find(d => d.user_id === profile.user_id);\n      if (decision) {\n        const compliance = this.checkCompliance(profile, decision.amount, 24, 24);\n        if (compliance.isCompliant) compliantCount++;\n        \n        compliance.violations.forEach(violation => {\n          violationCounts.set(violation, (violationCounts.get(violation) || 0) + 1);\n        });\n      }\n    });\n\n    const commonViolations = Array.from(violationCounts.entries())\n      .map(([violation, count]) => ({violation, count}))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      totalApplications: profiles.length,\n      compliantApplications: compliantCount,\n      complianceRate: (compliantCount / profiles.length) * 100,\n      commonViolations,\n      riskDistribution: {\n        low: decisions.filter(d => d.decision === 'Approve').length,\n        medium: decisions.filter(d => d.decision === 'Review').length,\n        high: decisions.filter(d => d.decision === 'Reject').length\n      }\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}