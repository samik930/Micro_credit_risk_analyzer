{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api';\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          detail: 'Unknown error'\n        }));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Network error occurred');\n    }\n  }\n\n  // Authentication endpoints\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n\n  // Loan application endpoints\n  async applyForLoan(application, userId) {\n    return this.request(`/loan/apply?user_id=${userId}`, {\n      method: 'POST',\n      body: JSON.stringify(application)\n    });\n  }\n  async getCreditScore(userId) {\n    return this.request(`/user/${userId}/credit-score`);\n  }\n\n  // Admin endpoints\n  async getAdminDashboard() {\n    return this.request('/admin/dashboard');\n  }\n  async getAllUsersWithScores() {\n    return this.request('/admin/users');\n  }\n\n  // Add new transaction\n  async addTransaction(userId, transaction) {\n    const response = await fetch(`http://localhost:8000/add-transaction/${userId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(transaction)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add transaction');\n    }\n    return response.json();\n  }\n  async clearTransactions(userId) {\n    const response = await fetch(`http://localhost:8000/clear-transactions/${userId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to clear transactions');\n    }\n    return response.json();\n  }\n\n  // Get user transactions\n  async getUserTransactions(userId, limit = 20) {\n    try {\n      const response = await fetch(`http://localhost:8000/transactions/${userId}?limit=${limit}`);\n      if (!response.ok) throw new Error('Failed to fetch transactions');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      // Return mock data as fallback\n      return {\n        transactions: [{\n          type: 'electricity',\n          amount: 2500,\n          status: 'paid_on_time',\n          provider: 'BSES',\n          description: 'Electricity Bill',\n          date: new Date().toISOString(),\n          days_late: 0\n        }]\n      };\n    }\n  }\n\n  // Get score history\n  async getScoreHistory(userId, limit = 10) {\n    try {\n      const response = await fetch(`http://localhost:8000/score-history/${userId}?limit=${limit}`);\n      if (!response.ok) throw new Error('Failed to fetch score history');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching score history:', error);\n      // Return mock data as fallback\n      return {\n        score_history: []\n      };\n    }\n  }\n\n  // Get user credit score with dynamic scoring\n  async getUserScore(userId) {\n    try {\n      const response = await fetch(`http://localhost:8000/user-score/${userId}`);\n      if (!response.ok) throw new Error('Failed to fetch user score');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching user score:', error);\n      // Return mock data as fallback\n      return {\n        score: 72,\n        grade: 'B+',\n        eligibility: 'approved',\n        factors: [{\n          category: 'Payment History',\n          impact: 15,\n          details: 'Good payment track record'\n        }, {\n          category: 'Income Stability',\n          impact: 8,\n          details: 'Regular salary credits'\n        }]\n      };\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      await fetch(`${API_BASE_URL.replace('/api', '')}/docs`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","detail","Error","status","error","login","credentials","method","body","JSON","stringify","register","userData","applyForLoan","application","userId","getCreditScore","getAdminDashboard","getAllUsersWithScores","addTransaction","transaction","clearTransactions","getUserTransactions","limit","console","transactions","type","amount","provider","description","date","Date","toISOString","days_late","getScoreHistory","score_history","getUserScore","score","grade","eligibility","factors","category","impact","details","healthCheck","replace","apiService"],"sources":["C:/Projects/micro-credit-risk-analyzer/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string;\n  phone: string;\n  address: string;\n  date_of_birth: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n  phone: string;\n  address: string;\n  date_of_birth: string;\n}\n\nexport interface LoanApplication {\n  monthly_income: number;\n  existing_debt: number;\n  loan_purpose: string;\n  requested_amount: number;\n}\n\nexport interface CreditScore {\n  score: number;\n  grade: string;\n  eligibility: string;\n  max_loan_amount: number;\n  recommended_amount: number;\n  interest_rate: number;\n  emi_amount: number;\n  emi_to_income_ratio: number;\n  rbi_compliant: boolean;\n  monthly_income?: number;\n  existing_debt?: number;\n  loan_purpose?: string;\n  requested_amount?: number;\n  factors: {\n    income: number;\n    debt: number;\n    purpose: number;\n    amount: number;\n  };\n}\n\nexport interface AdminDashboard {\n  total_users: number;\n  approved_count: number;\n  review_count: number;\n  rejected_count: number;\n  avg_score: number;\n  rbi_compliance_rate: number;\n  avg_eligible_loan_amount: number;\n  excellent_credit_count: number;\n  good_credit_count: number;\n  poor_credit_count: number;\n  common_violations: any[];\n}\n\nexport interface UserWithScore {\n  user_id: number;\n  name: string;\n  email: string;\n  phone: string;\n  monthly_income: number;\n  existing_debt: number;\n  requested_amount: number;\n  loan_purpose: string;\n  risk_score: number;\n  decision: string;\n  eligible_loan_amount: number;\n  emi_to_income_ratio: number;\n  rbi_compliant: boolean;\n}\n\nclass ApiService {\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Network error occurred');\n    }\n  }\n\n  // Authentication endpoints\n  async login(credentials: LoginCredentials): Promise<{ message: string; user: User }> {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n  }\n\n  async register(userData: RegisterData): Promise<{ message: string; user_id: number }> {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  // Loan application endpoints\n  async applyForLoan(application: LoanApplication, userId: number): Promise<{ application_id: number; credit_score: CreditScore }> {\n    return this.request(`/loan/apply?user_id=${userId}`, {\n      method: 'POST',\n      body: JSON.stringify(application),\n    });\n  }\n\n  async getCreditScore(userId: number): Promise<CreditScore> {\n    return this.request(`/user/${userId}/credit-score`);\n  }\n\n  // Admin endpoints\n  async getAdminDashboard(): Promise<AdminDashboard> {\n    return this.request('/admin/dashboard');\n  }\n\n  async getAllUsersWithScores(): Promise<UserWithScore[]> {\n    return this.request('/admin/users');\n  }\n\n  // Add new transaction\n  async addTransaction(userId: number, transaction: any): Promise<any> {\n    const response = await fetch(`http://localhost:8000/add-transaction/${userId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(transaction),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to add transaction');\n    }\n\n    return response.json();\n  }\n\n  async clearTransactions(userId: number): Promise<any> {\n    const response = await fetch(`http://localhost:8000/clear-transactions/${userId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to clear transactions');\n    }\n\n    return response.json();\n  }\n\n  // Get user transactions\n  async getUserTransactions(userId: number, limit: number = 20) {\n    try {\n      const response = await fetch(`http://localhost:8000/transactions/${userId}?limit=${limit}`);\n      if (!response.ok) throw new Error('Failed to fetch transactions');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      // Return mock data as fallback\n      return {\n        transactions: [\n          {\n            type: 'electricity',\n            amount: 2500,\n            status: 'paid_on_time',\n            provider: 'BSES',\n            description: 'Electricity Bill',\n            date: new Date().toISOString(),\n            days_late: 0\n          }\n        ]\n      };\n    }\n  }\n\n  // Get score history\n  async getScoreHistory(userId: number, limit: number = 10) {\n    try {\n      const response = await fetch(`http://localhost:8000/score-history/${userId}?limit=${limit}`);\n      if (!response.ok) throw new Error('Failed to fetch score history');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching score history:', error);\n      // Return mock data as fallback\n      return {\n        score_history: []\n      };\n    }\n  }\n\n  // Get user credit score with dynamic scoring\n  async getUserScore(userId: number) {\n    try {\n      const response = await fetch(`http://localhost:8000/user-score/${userId}`);\n      if (!response.ok) throw new Error('Failed to fetch user score');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching user score:', error);\n      // Return mock data as fallback\n      return {\n        score: 72,\n        grade: 'B+',\n        eligibility: 'approved',\n        factors: [\n          { category: 'Payment History', impact: 15, details: 'Good payment track record' },\n          { category: 'Income Stability', impact: 8, details: 'Regular salary credits' }\n        ]\n      };\n    }\n  }\n\n  // Health check\n  async healthCheck(): Promise<boolean> {\n    try {\n      await fetch(`${API_BASE_URL.replace('/api', '')}/docs`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}